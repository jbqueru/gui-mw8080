; Copyright 2023 Jean-Baptiste "JBQ" "Djaybee" Queru
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; 
; http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.

; SPDX-License-Identifier: Apache-2.0



; 80 columns, hard 8-character tabs



; ##############################################################################
; ##############################################################################
; ###                                                                        ###
; ###                                                                        ###
; ###                                 Invadows                               ###
; ###                                                                        ###
; ###    A windowing system running on Williams 8080 hardware, as used in    ###
; ###         Gun Fight, Space Invaders, and quite a few other games.        ###
; ###                                                                        ###
; ###                                                                        ###
; ##############################################################################
; ##############################################################################



; ####################################
; ####################################
; ###                              ###
; ###                              ###
; ###     HARDWARE ENVIRONMENT     ###
; ###                              ###
; ###                              ###
; ####################################
; ####################################

; This software is designed on the hardware board that was built by
; Midway for games from Gun Fight (1975) to Space Invaders II (1980).
;
; 8080 processor, starting execution at address $0000.
; 8kB of ROM from $0000 to $1FFF
; 8kB of RAM from $2000 to $3FFF
;     including 7kB framebuffer starting at $2400, 256x224 1-bit.
;     Rotated 90 degrees CCW seen from viewer.
;     MSB to the "right" (top after rotation) (counter-intuitive!!!)
;
; I/O ports for Space Invaders (including cocktail version)
;
; Inputs
;
; port 1 input
;   0 - coin, debounced? (returns 1 once per coin, resets after read)
;   1 - 2P start
;   2 - 1P start
;   4 - 1P fire
;   5 - 1P left
;   6 - 1P right
;
; port 2 input
;   0,1 - DIP switches (number of ships from 3 to 6)
;   2 - DIP switch (0=hard, 1=easy)
;   4 - 2P fire
;   5 - 2P left
;   6 - 2P right
;   7 - DIP switch (show/hide coin info)
;
; Sounds
;
; port 3 output
;   0 - saucer (doesn't automatically stop)
;   1 - shot
;   2 - player hit
;   3 - invader hit
;   4 - extended play
;
; port 4 output
;   0 - invader motion A
;   1 - invader motion B
;   2 - invader motion C
;   3 - invader motion D
;   4 - saucer hit
;   5 - amplifier on/off
;
; Shifter
;
; port 2 output: number of bits to shift
; port 4 output: data stream, low byte first
; port 3 input: top 8 bits of the data stream, taken by shifting the data
;               stream to the left by the number of bits specified in port 2
;
; Watchdog
;
; port 6: in theory, any read or write will reset the watchdog.
;         However, the 8bitworkshop emulator only resets on writes.


; ####################################
; ####################################
; ###                              ###
; ###                              ###
; ###     MEMORY / PORT LAYOUT     ###
; ###                              ###
; ###                              ###
; ####################################
; ####################################

; ###########
; ##       ##
; ##  RAM  ##
; ##       ##
; ###########

STACK_TOP	.equ	$2400
FRAME_BUFFER	.equ	$2400

; ##############
; ##          ##
; ##  INPUTS  ##
; ##          ##
; ##############

SHIFTER_OUTPUT	.equ	3

; ###############
; ##           ##
; ##  OUTPUTS  ##
; ##           ##
; ###############

SHIFTER_AMOUNT	.equ	2
SHIFTER_INPUT	.equ	4
WATCHDOG	.equ	6


; ####################
; ####################
; ###              ###
; ###              ###
; ###     CODE     ###
; ###              ###
; ###              ###
; ####################
; ####################

; ############
; ##        ##
; ##  INIT  ##
; ##        ##
; ############

	.8080			; Beware: Space Invaders uses a true 8080
				; but zmac and 8bitworkshop support full Z80
				; such that there's a risk that this code
				; might not work on actual hardware (or on
				; a strict 8080 emulator.)
				; This also means that the few areas where
				; Z80 isn't exactly backward-compatible with
				; 8080 (e.g. P/V flag on arithmetic operations)
				; are areas of risk. That also includes timings
				; which are slightly different between the two.

	.org	0		; Execution starts at address 0

	DI			; Let's not use interrupts (yet)

	LXI	SP,STACK_TOP	; Set up the stack at the top of the user RAM

; ############
; ##        ##
; ##  TEST  ##
; ##        ##
; ############

	CALL	bg		; Fill background

	LXI	B,20 * 256 + 203
	LXI	D,20 * 256 + 89
	CALL	ui_window	; Draw a hard-coded window

	LXI	B,30 * 256 + 48
	MVI	E,'M'
	CALL	one_char	; Draw a character

	LXI	B,38 * 256 + 48
	MVI	E,'E'
	CALL	one_char	; Draw a character

	LXI	B,46 * 256 + 48
	MVI	E,'G'
	CALL	one_char	; Draw a character

	LXI	B,54 * 256 + 48
	MVI	E,'A'
	CALL	one_char	; Draw a character

	LXI	B,62 * 256 + 48
	MVI	E,'B'
	CALL	one_char	; Draw a character

	LXI	B,70 * 256 + 48
	MVI	E,'U'
	CALL	one_char	; Draw a character

	LXI	B,78 * 256 + 48
	MVI	E,'S'
	CALL	one_char	; Draw a character

	LXI	B,86 * 256 + 48
	MVI	E,'T'
	CALL	one_char	; Draw a character

	LXI	B,94 * 256 + 48
	MVI	E,'E'
	CALL	one_char	; Draw a character

	LXI	B,102 * 256 + 48
	MVI	E,'R'
	CALL	one_char	; Draw a character

	LXI	B,110 * 256 + 48
	MVI	E,'S'
	CALL	one_char	; Draw a character

	LXI	B,140 * 256 + 60
	MVI	E,' '
	CALL	one_char	; Draw a character


forever:
	OUT	WATCHDOG	; Tickle watchdog
	JMP	forever		; Main loop

; ###########################
; ###########################
; ###                     ###
; ###                     ###
; ###     UI ROUTINES     ###
; ###                     ###
; ###                     ###
; ###########################
; ###########################


ui_window:
	PUSH	B
	PUSH	D
	CALL	rblack
	POP	D
	POP	B
	PUSH	B
	PUSH	D
	INR	B
	DCR	C
	DCR	C
	INR	D
	MOV	A,D
	ADI	8
	MOV	E,A
	CALL	rwhite
	POP	D
	POP	B
	PUSH	B
	PUSH	D
	INR	B
	MOV	A,C
	SBI	12
	MOV	C,A
	MOV	A,D
	ADI	11
	MOV	D,A
	MOV	A,E
	SBI	12
	MOV	E,A
	CALL	rwhite
	POP	D
	POP	B
	PUSH	B
	PUSH	D
	MOV	A,C
	SBI	2
	MOV	C,A
	SBI	8
	MOV	B,A
	MOV	A,E
	SBI	2
	MOV	E,A
	SBI	8
	MOV	D,A
	CALL	rwhite
	POP	D
	POP	B
	PUSH	B
	PUSH	D
	MOV	A,C
	SBI	2
	MOV	C,A
	SBI	8
	MOV	B,A
	MOV	A,D
	ADI	11
	MOV	D,A
	MOV	A,E
	SBI	12
	MOV	E,A
	CALL	rwhite
	POP	D
	POP	B
	PUSH	B
	PUSH	D
	INR	B
	MOV	A,C
	SBI	12
	MOV	C,A
	MOV	A,E
	SBI	2
	MOV	E,A
	SBI	8
	MOV	D,A
	CALL	rwhite
	POP	D
	POP	B
	RET


; #################################
; #################################
; ###                           ###
; ###                           ###
; ###     GRAPHICS ROUTINES     ###
; ###                           ###
; ###                           ###
; #################################
; #################################


; ##########################
; ##                      ##
; ##  BACKGROUND STIPPLE  ##
; ##                      ##
; ##########################

; Inputs: none
; Outputs: none
; Modifies: BCHLFA

; Possible speed optimization: unroll loop slightly (e.g. 2x, 4x).

bg:
	MVI	C,224		; 224 columns per screen

	LXI	H,FRAME_BUFFER	; Start address of framebuffer
	MVI	A,$55		; Pattern
bgcol:

	MVI	B,32		; 32 bytes per column
bgbyte:
	MOV	M,A		; Write byte through HL
	INX	H		; Increment HL pointer
	DCR	B		; Decrement loop counter
	JNZ	bgbyte		; Loop

	CMA			; Flip pattern bits

	DCR	C		; Decrement loop counter
	JNZ	bgcol		; Loop

	RET


; #############################
; ##                         ##
; ##  HORIZONTAL LINE WHITE  ##
; ##                         ##
; #############################

; Inputs: B: xleft
;         C: xright
;         D: y
; Outputs: none
; Modifies: BCDEHLFA


hwhite:
; compute number of columns, store in E
	MOV	A,C
	SUB	B
	INR	A
	MOV	E,A	; E = C - B + 1

; address of the first column: HL = FRAME_BUFFER + B * 32
	MOV	L,B
	MVI	H,0
	DAD	H
	DAD	H
	DAD	H
	DAD	H
	DAD	H
	LXI	B,FRAME_BUFFER
	DAD	B

; address of first pixel: HL += (255 - D) >> 3
	MOV	A,D
	CMA
	RRC
	RRC
	RRC
	ANI	31
	ADD	L
	MOV	L,A

; pattern of pixels: A = $80 >> (D & 7)
	MOV	A,D
	ANI	7
	MOV	B,A
	MVI	A,10000000b
	JZ	hwshiftdone
hwshift:
	RRC
	DCR	B
	JNZ	hwshift
hwshiftdone:
	MOV	D,A

; write the actual pixels
	LXI	B,32
hwpixloop:
	MOV	A,D
	ORA	M
	MOV	M,A
	DAD	B
	DCR	E
	JNZ	hwpixloop

	RET

; #######################
; ##                   ##
; ##  RECTANGLE WHITE  ##
; ##                   ##
; #######################

; Inputs: B: xleft
;         C: xright
;         D: ytop
;         E: ybottom
; Outputs: none
; Modifies: DHLFA

rwhite:
	PUSH	B		; Save BC
	PUSH	D		; Save DE

	CALL	hwhite		; Draw one line

	POP	D		; Recover DE
	POP	B		; Recover BC

	MOV	A,D
	CMP	E		; Check if drawn last line
	RZ			; If yes, return

	INR	D		; Move to next line
        JMP	rwhite		; Continue

; #############################
; ##                         ##
; ##  HORIZONTAL LINE BLACK  ##
; ##                         ##
; #############################

; Inputs: B: xleft
;         C: xright
;         D: y
; Outputs: none
; Modifies: BCDEHLFA


hblack:
; compute number of columns, store in E
	MOV	A,C
	SUB	B
	INR	A
	MOV	E,A	; E = C - B + 1

; address of the first column: HL = FRAME_BUFFER + B * 32
	MOV	L,B
	MVI	H,0
	DAD	H
	DAD	H
	DAD	H
	DAD	H
	DAD	H
	LXI	B,FRAME_BUFFER
	DAD	B

; address of first pixel: HL += (255 - D) >> 3
	MOV	A,D
	CMA
	RRC
	RRC
	RRC
	ANI	31
	ADD	L
	MOV	L,A

; pattern of pixels: A = $80 >> (D & 7)
	MOV	A,D
	ANI	7
	MOV	B,A
	MVI	A,10000000b
	JZ	hbshiftdone
hbshift:
	RRC
	DCR	B
	JNZ	hbshift
hbshiftdone:
	CMA
	MOV	D,A

; write the actual pixels
	LXI	B,32
hbpixloop:
	MOV	A,D
	ANA	M
	MOV	M,A
	DAD	B
	DCR	E
	JNZ	hbpixloop

	RET

; #######################
; ##                   ##
; ##  RECTANGLE BLACK  ##
; ##                   ##
; #######################

; Inputs: B: xleft
;         C: xright
;         D: ytop
;         E: ybottom
; Outputs: none
; Modifies: DHLFA

rblack:
	PUSH	B		; Save BC
	PUSH	D		; Save DE

	CALL	hblack		; Draw one line

	POP	D		; Recover DE
	POP	B		; Recover BC

	MOV	A,D
	CMP	E		; Check if drawn last line
	RZ			; If yes, return

	INR	D		; Move to next line
        JMP	rblack		; Continue

; #####################
; ##                 ##
; ##  ONE CHARACTER  ##
; ##                 ##
; #####################

; Draws one character at the specified coordinates.
; Coordinates are the top-left corner of the character.
; Restrictions: no checks are performed on the inputs.

; There's something conceptually weird in the shifting process, which makes
; things hard to count: strictly speaking, there are 64 bits of input and 64
; bits of output.
; However, the various byte alignments throw this off: the output spans 16
; bytes, albeit masked so that there are only 64 active bits. The main loop
; therefore covers 8 iterations of 2 output bytes each.
; The first read of an iteration actually retrieves the same byte from the
; shifter as the second read of the previous iteration, though it gets masked
; differently so that there are no duplicated bits in the output. That implies
; that 9 different bytes are read from the shifter, which in turn implies that
; 10 different bytes are written to the shifter that affect the output, with
; the first and last byte having no impact on the final output.
; The first byte ends up being whatever was in the shifter before, while the
; last byte needs to be explicitly written in order to make the shifter shift
; that last byte ends up being read through an intentional buffer overflow.

; There's a tiny bit of magic in the masking code: since the characters are
; stored exactly 8 pixels tall, the top mask and the bottom mask are bitwise
; complements of each other, which can apparently save one register. However,
; a naive approach would flip the bits for each operation, which would be
; expensive: move to the accumulator, flip the bits, move back to the register,
; twice for each loop iteration. Instead, the code uses the fact that
; (x OR NOT mask) is also (NOT (NOT x AND mask)) where, in the latter version,
; the mask doesn't need to be flipped. For convenience and a tiny optimization,
; the font is stored flipped from its framebuffer representation, which moves
; the NOT operations around but keeps the property of not having to bit-flip
; the mask.

; Inputs: B: x
;         C: y
;         D:
;         E: character
; Outputs: none
; Modifies: TBD

one_char:
	; A=? B=x C=y D=? E=char HL=?

	; Compute source address
	MOV	A,E
	SBI	32
	MOV	E,A
	MVI	D,0
	XCHG
	DAD	H
	DAD	H
	DAD	H
	XCHG
	MOV	A,D
	ADI	font >> 8
	MOV	D,A

	; A=? B=x C=y DE=source HL=?

	; Compute x * 32 by adding HL to itself 5 times.
	MOV	L,B
	MVI	H,0
	DAD	H
	DAD	H
	DAD	H
	DAD	H
	DAD	H

	; A=? B=x C=y DE=source HL=32 * x

	; Add framebuffer address
	; Trick: framebuffer address is a multiple of 256, so we only need
	;        to add the high byte.
	MOV	A,H
	ADI	FRAME_BUFFER >> 8
	MOV	H,A

	; A=? B=x C=y DE=source HL=column address

	; Add y offset = (255 - y) / 8
	; Trick: columns are aligned on 32 bytes, guaranteeing that columns
	;        don't cross page boundaries.
	MOV	A,C
	CMA		; invert all bits = 255 - y
	RAR
	RAR
	RAR
	ANI	$1F	; clear the unnecessary bits left over by the rotations
	ADD	L
	MOV	L,A

	; A=? B=x C=y DE=source HL=destination

	; Compute sub-byte shift count = (255 - y) % 8
	MOV	A,C
	CMA
	ANI	$07
	OUT	SHIFTER_AMOUNT

	; A=? B=x C=y DE=source HL=destination

	; Compute the bit mask using the shifter itself.
	XRA	A		; Cheap way to clear A
	OUT	SHIFTER_INPUT
	CMA			; A = $FF
	OUT	SHIFTER_INPUT
	IN	SHIFTER_OUTPUT
	MOV	C,A

	; A=? B=x C=mask DE=source HL=destination

	; Loop count
	MVI	B,8

	; A=? B=loop C=mask DE=source HL=destination

	; Insert the first data byte into the shifter, point to next input byte
	LDAX	D
	OUT	SHIFTER_INPUT
	INX	D

char_column:
	; Write the bottom byte for the column, point output to the top byte
	IN	SHIFTER_OUTPUT
	ANA	C
	CMA
	ANA	M
	MOV	M,A
	INX	H

	; Insert the next byte into the shifter, so that the shifter shifts
	LDAX	D
	INX	D
	OUT	SHIFTER_INPUT

	; Write the bottom byte for the column, point output to next column
	IN	SHIFTER_OUTPUT
	CMA
	ORA	C
	ANA	M
	MOV	M,A
	MVI	A,31
	ADD	L
	MOV	L,A
	MOV	A,H
	ADC	0
	MOV	H,A

	; Loop to next column
	DCR	B
	JNZ	char_column

	RET


; ####################
; ####################
; ###              ###
; ###              ###
; ###     DATA     ###
; ###              ###
; ###              ###
; ####################
; ####################

	.org	$1D00
font:
	; space
	.defb	00000000b
	.defb	00000000b
	.defb	00000000b
	.defb	00000000b
	.defb	00000000b
	.defb	00000000b
	.defb	00000000b
	.defb	00000000b

	; !
	.defs	8

	; "
	.defs	8

	; #
	.defs	8

	; $
	.defs	8

	; %
	.defs	8

	; &
	.defs	8

	; '
	.defs	8

	; (
	.defs	8

	; )
	.defs	8

	; *
	.defs	8

	; +
	.defs	8

	; ,
	.defs	8

	; -
	.defs	8

	; .
	.defs	8

	; /
	.defs	8

	; 0
	.defs	8

	; 1
	.defs	8

	; 2
	.defs	8

	; 3
	.defs	8

	; 4
	.defs	8

	; 5
	.defs	8

	; 6
	.defs	8

	; 7
	.defs	8

	; 8
	.defs	8

	; 9
	.defs	8

	; :
	.defs	8

	; ;
	.defs	8

	; <
	.defs	8

	; =
	.defs	8

	; >
	.defs	8

	; ?
	.defs	8

	; @
	.defs	8

	; A
	.defb	00000000b
	.defb	00111110b
	.defb	01111110b
	.defb	11001000b
	.defb	11001000b
	.defb	01111110b
	.defb	00111110b
	.defb	00000000b

	; B
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	10010010b
	.defb	10010010b
	.defb	11111110b
	.defb	01101100b
	.defb	00000000b

	; C
	.defb	00111000b
	.defb	01111100b
	.defb	11000110b
	.defb	10000010b
	.defb	10000010b
	.defb	11000110b
	.defb	01000100b
	.defb	00000000b

	; D
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	10000010b
	.defb	11000110b
	.defb	01111100b
	.defb	00111000b
	.defb	00000000b

	; E
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	10010010b
	.defb	10111010b
	.defb	10000010b
	.defb	11000110b
	.defb	00000000b

	; F
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	10010010b
	.defb	10111000b
	.defb	10000000b
	.defb	11000000b
	.defb	00000000b

	; G
	.defb	00111000b
	.defb	01111100b
	.defb	11000110b
	.defb	10000010b
	.defb	10001010b
	.defb	11001110b
	.defb	01001110b
	.defb	00000000b

	; H
	.defb	00000000b
	.defb	11111110b
	.defb	11111110b
	.defb	00010000b
	.defb	00010000b
	.defb	11111110b
	.defb	11111110b
	.defb	00000000b

	; I
	.defb	00000000b
	.defb	10000010b
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	10000010b
	.defb	10000010b
	.defb	00000000b

	; J
	.defb	00001100b
	.defb	00001110b
	.defb	00000010b
	.defb	10000010b
	.defb	11111110b
	.defb	11111100b
	.defb	10000000b
	.defb	00000000b

	; K
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	00010000b
	.defb	00111000b
	.defb	11101110b
	.defb	11000110b
	.defb	00000000b

	; L
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	10000010b
	.defb	00000010b
	.defb	00000110b
	.defb	00001110b
	.defb	00000000b

	; M
	.defb	11111110b
	.defb	11111110b
	.defb	01110000b
	.defb	00111000b
	.defb	01110000b
	.defb	11111110b
	.defb	11111110b
	.defb	00000000b

	; N
	.defb	11111110b
	.defb	11111110b
	.defb	01100000b
	.defb	00110000b
	.defb	00011000b
	.defb	11111110b
	.defb	11111110b
	.defb	00000000b

	; O
	.defb	00111000b
	.defb	01111100b
	.defb	11000110b
	.defb	10000010b
	.defb	11000110b
	.defb	01111100b
	.defb	00111000b
	.defb	00000000b

	; P
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	10010010b
	.defb	10010000b
	.defb	11110000b
	.defb	01100000b
	.defb	00000000b

	; Q
	.defb	00111100b
	.defb	01111110b
	.defb	11000010b
	.defb	10001010b
	.defb	11001100b
	.defb	01110110b
	.defb	00111010b
	.defb	00000000b

	; R
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	10010000b
	.defb	10011000b
	.defb	11111110b
	.defb	01100110b
	.defb	00000000b

	; S
	.defb	00000000b
	.defb	01100100b
	.defb	11110110b
	.defb	10010010b
	.defb	10010010b
	.defb	11011110b
	.defb	01001100b
	.defb	00000000b

	; T
	.defb	00000000b
	.defb	11000000b
	.defb	10000010b
	.defb	11111110b
	.defb	11111110b
	.defb	10000010b
	.defb	11000000b
	.defb	00000000b

	; U
	.defb	00000000b
	.defb	11111100b
	.defb	11111110b
	.defb	00000010b
	.defb	00000010b
	.defb	11111110b
	.defb	11111100b
	.defb	00000000b

	; V
	.defb	00000000b
	.defb	11111000b
	.defb	11111100b
	.defb	00000110b
	.defb	00000110b
	.defb	11111100b
	.defb	11111000b
	.defb	00000000b

	; W
	.defb	11111110b
	.defb	11111110b
	.defb	00001100b
	.defb	00011000b
	.defb	00001100b
	.defb	11111110b
	.defb	11111110b
	.defb	00000000b

	; X
	.defb	10000110b
	.defb	11001110b
	.defb	01111000b
	.defb	00110000b
	.defb	01111000b
	.defb	11001110b
	.defb	10000110b
	.defb	00000000b

	; Y
	.defb	00000000b
	.defb	11100000b
	.defb	11110010b
	.defb	00011110b
	.defb	00011110b
	.defb	11110010b
	.defb	11100000b
	.defb	00000000b

	; Z
	.defb	11100010b
	.defb	11000110b
	.defb	10001110b
	.defb	10011010b
	.defb	10110010b
	.defb	11100110b
	.defb	11001110b
	.defb	00000000b

	; [
	.defs	8

	; \
	.defs	8

	; ]
	.defs	8

	; ^
	.defs	8

	; _
	.defs	8

	; `
	.defs	8

	; a
	.defs	8

	; b
	.defs	8

	; c
	.defs	8

	; d
	.defs	8

	; e
	.defs	8

	; f
	.defs	8

	; g
	.defs	8

	; h
	.defs	8

	; i
	.defs	8

	; j
	.defs	8

	; k
	.defs	8

	; l
	.defs	8

	; m
	.defs	8

	; n
	.defs	8

	; o
	.defs	8

	; p
	.defs	8

	; q
	.defs	8

	; r
	.defs	8

	; s
	.defs	8

	; t
	.defs	8

	; u
	.defs	8

	; v
	.defs	8

	; w
	.defs	8

	; x
	.defs	8

	; y
	.defs	8

	; z
	.defs	8

	; {
	.defs	8

	; |
	.defs	8

	; }
	.defs	8

	; ~
	.defs	8

	; del
	.defb	10101010b
	.defb	10101010b
	.defb	01010101b
	.defb	01010101b
	.defb	10101010b
	.defb	10101010b
	.defb	01010101b
	.defb	01010101b
; 345678901234567890123456789012345678901234567890123456789012345678901234567890
